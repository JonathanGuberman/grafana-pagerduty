{"version":3,"sources":["../../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","headers","jsonData","apiKey","doRequest","method","then","response","status","message","title","options","result","i","data","incidents","length","d","annotation","serviceId","service","id","urgency","created_at","Date","parse","incident","enabled","datasource","time","tags","incident_key","incident_number","text","summary","push","query","JSON","replace","queryString","range","from","toISOString","to","transformResponse","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = 'https://api.pagerduty.com/incidents?time_zone=UTC';\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.headers = {'Accept': 'application/vnd.pagerduty+json;version=2'};\n    this.headers['Authorization'] = 'Token token=' + instanceSettings.jsonData.apiKey;\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  transformResponse(response, options) {\n\n    var result = [];\n    for(var i = 0; i < response.data.incidents.length; i++){\n        var d = response.data.incidents[i];\n        if (options.annotation.serviceId && d.service.id != options.annotation.serviceId) {\n            continue;\n        }\n        if (options.annotation.urgency && d.urgency != options.annotation.urgency) {\n            continue;\n        }\n        if (options.annotation.status && d.status != options.annotation.status) {\n            continue;\n        }\n        var created_at = Date.parse(d.created_at);\n        var incident = { annotation: \n            { name: d.id, \n              enabled: true, \n              datasource: \"grafana-pagerduty\"\n            }, \n            title: d.title,\n            time: created_at, \n            tags: [ d.type, d.incident_key, d.incident_number, d.status, d.service.id ], \n            text: d.summary\n        }; \n        result.push(incident);\n    }\n    return result;\n  }\n\n  annotationQuery(options) {\n    var query = JSON.parse(this.templateSrv.replace(options.annotation.query, {}, 'glob'));\n\n    var queryString = \"\";\n\n    queryString += \"&since=\" + new Date(options.range.from).toISOString();\n    queryString += \"&until=\" + new Date(options.range.to).toISOString();\n\n    return this.doRequest({\n      url: this.url + queryString,\n      method: 'GET'\n    }).then(response => {\n        var result = this.transformResponse(response, options);\n        return result;\n    });\n  }\n\n  doRequest(options) {\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n}\n"]}